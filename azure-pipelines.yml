# Azure DevOps Pipeline
# Build stage creates a zip archive of src folder
# Test deployment stage sends the archive to Workato API

trigger:
- main

variables:
  buildConfiguration: 'Release'
  artifactName: 'workato-manifest'

stages:
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: CreateArchive
    displayName: 'Create Source Archive'
    pool:
      vmImage: 'ubuntu-latest'
    
    steps:
    - checkout: self
      displayName: 'Checkout repository'
    
    - task: ArchiveFiles@2
      displayName: 'Create zip archive of src folder'
      inputs:
        rootFolderOrFile: '$(Build.SourcesDirectory)/src'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/src-archive.zip'
        replaceExistingArchive: true
        verbose: true
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish build artifact'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: '$(artifactName)'
        publishLocation: 'Container'

- stage: TestDeployment
  displayName: 'Test Deployment Stage'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.Reason'], 'Manual'))
  jobs:
  - deployment: SendToWorkato
    displayName: 'Upload Manifest to Workato'
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download build artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(artifactName)'
              downloadPath: '$(Pipeline.Workspace)'
          
          - task: PowerShell@2
            displayName: 'Send Upload Manifest POST request to Workato API'
            inputs:
              targetType: 'inline'
              script: |
                $artifactPath = "$(Pipeline.Workspace)/$(artifactName)/src-archive.zip"
                $importUri = "https://www.workato.com/api/packages/import/25995545"
                $headers = @{
                    "Authorization" = "Bearer $(workato_rlcm_token)"
                    "Content-Type" = "application/octet-stream"
                }
                
                Write-Host "Sending manifest archive file to Workato API..."
                Write-Host "File path: $artifactPath"
                Write-Host "Import URI: $importUri"
                
                try {
                    # Send POST request to import package
                    $fileBytes = [System.IO.File]::ReadAllBytes($artifactPath)
                    $importResponse = Invoke-RestMethod -Uri $importUri -Method Post -Headers $headers -Body $fileBytes
                    Write-Host "Manifest Upload Request sent: $($importResponse | ConvertTo-Json -Depth 3)"
                    
                    # Extract package ID from response
                    $packageId = $importResponse.id
                    $importStatus = $importResponse.status
                    if ($packageId) {
                        Write-Host "Manifest Upload Request ID: $packageId. Status: $importStatus"
                        
                        # Send GET request to retrieve package details with retry logic
                        $getUri = "https://www.workato.com/api/packages/$packageId"
                        $getHeaders = @{
                            "Authorization" = "Bearer $(workato_rlcm_token)"
                        }
                        
                        Write-Host "Retrieving package details from: $getUri"
                        
                        $maxRetries = $(workato_rlcm_upload_maximum_retries)
                        $retryDelay = $(workato_rlcm_upload_delay_retry_in_sec)
                        $packageDetails = $null
                        $success = $false
                        
                        for ($attempt = 1; $attempt -le $maxRetries; $attempt++) {
                            try {
                                Write-Host "Attempt $attempt of $maxRetries..."
                                $packageDetails = Invoke-RestMethod -Uri $getUri -Method Get -Headers $getHeaders
                                $status = $packageDetails.status
                                Write-Host "Manifest Upload Request ID: $packageId. Status: $status (Attempt: $attempt)."
                                if ($packageDetails.status -eq 'completed') {
                                  $success = $true
                                  break
                                }
                            } catch {
                                Write-Warning "Manifest Upload Request ID: $packageId. Attempt $attempt failed: $($_.Exception.Message)"
                                if ($attempt -lt $maxRetries) {
                                    Write-Host "Waiting $retryDelay seconds before retry..."
                                    Start-Sleep -Seconds $retryDelay
                                } else {
                                    Write-Error "All $maxRetries attempts failed to retrieve package details"
                                    throw
                                }
                            }
                        }
                        
                        if (-not $success) {
                            Write-Error "Failed to retrieve package details after $maxRetries attempts"
                            exit 1
                        }
                    } else {
                        Write-Warning "No package ID found in import response"
                    }
                } catch {
                    Write-Error "Failed to send request: $($_.Exception.Message)"
                    Write-Error "Response: $($_.Exception.Response | ConvertTo-Json -Depth 3)"
                    exit 1
                }
              pwsh: true